// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String
  locale      String?
  description String?
  metaId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  products    Product[]
  Meta        Meta       @relation(fields: [metaId], references: [id])
  ImageMeta   ImageMeta? @relation(fields: [imageMetaId], references: [id])
  imageMetaId String?

  @@map("category")
}

model Product {
  id             String          @id @default(cuid())
  name           String
  slug           String?
  locale         String?
  description    String?
  type           String?
  isFeatured     Boolean         @default(false)
  isShowroom     Boolean         @default(false)
  category       Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String
  metaId         String
  coverImage     String?
  images         String[]
  price          Float
  promoLayout    String?
  promoImages    PromoImage[]
  files          File[]
  drawingsImages DrawingsImage[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  meta           Meta            @relation(fields: [metaId], references: [id])
  ImageMeta      ImageMeta?      @relation(fields: [imageMetaId], references: [id])
  imageMetaId    String?
  status         String          @default("draft")

  @@map("product")
}

model PromoImage {
  id        String    @id @default(cuid())
  images    String[]
  type      String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  meta      ImageMeta @relation(fields: [metaId], references: [id], onDelete: Cascade)
  metaId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@map("promo_image")
}

model ImageMeta {
  id             String          @id @default(cuid())
  title          String
  alt            String?
  locale         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  promoImages    PromoImage[]
  drawingsImages DrawingsImage[]
  Category       Category[]
  Product        Product[]
  Image          Image[]

  @@map("image_meta")
}

model DrawingsImage {
  id        String    @id @default(cuid())
  images    String[]
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  meta      ImageMeta @relation(fields: [metaId], references: [id], onDelete: Cascade)
  metaId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@map("drawings_image")
}

model File {
  id        String   @id @default(cuid())
  name      String
  file      String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("model")
}

model Page {
  id        String    @id @default(cuid())
  name      String
  slug      String
  locale    String?
  meta      Meta      @relation(fields: [metaId], references: [id], onDelete: Cascade)
  metaId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  status    String    @default("draft")
  blocks    Block[]
  galleries Gallery[]

  @@map("page")
}

model Meta {
  id          String     @id @default(cuid())
  title       String?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  pages       Page[]
  categories  Category[]
  products    Product[]

  @@map("meta")
}

model Block {
  id        String   @id @default(cuid())
  name      String
  locale    String?
  title     String?
  content   String?
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  pageId    String?
  imageId   String?
  page      Page?    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  image     Image?   @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@map("block")
}

model Image {
  id        String     @id @default(cuid())
  image     String
  meta      ImageMeta? @relation(fields: [metaId], references: [id], onDelete: Cascade)
  metaId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  blocks    Block[]

  @@map("image")
}

model Gallery {
  id        String   @id @default(cuid())
  name      String
  locale    String?
  title     String?
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId    String

  @@map("gallery")
}

model Locale {
  id        String   @id @default(cuid())
  name      String
  slug      String
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("locale")
}
